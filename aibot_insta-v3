import requests
import random
import gspread
import time
import openai
from flask import Flask, request, jsonify

# Your existing Instagram accounts and configurations
accounts = [
    {
        "username": "account1",
        "access_token": "access_token1",
        # Add more details for this account
    },
    # Add more Instagram accounts
]

# Your Instagram Graph API access token
access_tokens = [account["access_token"] for account in accounts]

# List of different hashtags
hashtags = ['hashtag1', 'hashtag2', 'hashtag3']

# Maximum number of posts to retrieve (adjust as needed)
max_posts = 1000

# Initialize a set to store retrieved usernames
retrieved_usernames = set()

# Set up Google Sheets API credentials
# Replace with your actual Google Sheets credentials
scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
creds = ServiceAccountCredentials.from_json_keyfile_name('your-credentials.json', scope)
client = gspread.authorize(creds)

# Open the Google Sheets document containing the list of usernames
spreadsheet = client.open('Your Instagram Usernames Document')
worksheet = spreadsheet.get_worksheet(0)

# Initialize the OpenAI API key
openai.api_key = 'your-openai-api-key'

# Flask app for Dialogflow fulfillment
app = Flask(__name)

# Function to validate and store usernames based on bio
def validate_and_store_usernames():
    for _ in range(10):  # You can adjust the number of runs
        hashtag = random.choice(hashtags)
        next_url = f'https://graph.instagram.com/v13.0/tags/{hashtag}/recent_media?access_token={random.choice(access_tokens)}&count=10'
        # ...

# Function to send a DM using a specific account
def send_dm(username, access_token):
    # ...
    response = openai.Completion.create(
        engine="davinci",
        prompt=full_message,
        max_tokens=100
    )
    generated_message = response.choices[0].text.strip()
    # ...

# Function to mark a username as "messaged" in the Google Sheets document
def mark_as_messaged(username):
    cell = worksheet.find(username)
    worksheet.update_cell(cell.row, cell.col + 1, 'Messaged')

# Flask route for Dialogflow webhook
@app.route('/dialogflow-webhook', methods=['POST'])
def dialogflow_webhook():
    data = request.json
    # Implement Dialogflow intent handling here
    # Generate responses based on detected intents and entities
    return jsonify({"fulfillmentText": "Response from your Flask server"})

# Function to process usernames
def process_usernames():
    usernames = worksheet.col_values(1)  # Assuming usernames are in the first column
    for username in usernames:
        if username != '' and username != 'Messaged':
            send_dm(username, access_token)
            mark_as_messaged(username)
            time.sleep(60)  # Sleep to respect Instagram's rate limits

# Main program
if __name__ == '__main__':
    validate_and_store_usernames()
    process_usernames()
    # Start the Flask server for Dialogflow fulfillment
    app.run(host='0.0.0.0', port=5000)